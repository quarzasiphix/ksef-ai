import React from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { BusinessProfile } from "@/types";
import { saveBusinessProfile } from "@/integrations/supabase/repositories/businessProfileRepository";
import { useAuth } from "@/hooks/useAuth";
import { useIsMobile } from "@/hooks/use-mobile";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

const formSchema = z.object({
  name: z.string().min(1, "Nazwa jest wymagana"),
  taxId: z.string().min(10, "NIP musi mieć 10 znaków").max(10),
  address: z.string().min(1, "Adres jest wymagany"),
  postalCode: z.string().min(1, "Kod pocztowy jest wymagany"),
  city: z.string().min(1, "Miasto jest wymagane"),
  regon: z.string().optional().or(z.literal("")),
  bankAccount: z.string().optional().or(z.literal("")),
  email: z.string().email("Niepoprawny format email").optional().or(z.literal("")),
  phone: z.string().optional().or(z.literal("")),
  isDefault: z.boolean().default(false),
  tax_type: z.enum(["skala", "liniowy", "ryczalt"]).optional(),
});

interface BusinessProfileFormProps {
  initialData?: BusinessProfile;
  onSuccess?: () => void;
}

const BusinessProfileForm = ({
  initialData,
  onSuccess,
}: BusinessProfileFormProps) => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const isEditing = !!initialData?.id;
  const isMobile = useIsMobile();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: initialData?.name || "",
      taxId: initialData?.taxId || "",
      address: initialData?.address || "",
      postalCode: initialData?.postalCode || "",
      city: initialData?.city || "",
      regon: initialData?.regon || "",
      bankAccount: initialData?.bankAccount || "",
      email: initialData?.email || "",
      phone: initialData?.phone || "",
      isDefault: initialData?.isDefault || false,
      tax_type: initialData?.tax_type || "skala",
    },
  });

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    try {
      // Ensure all required fields are present
      if (!user?.id) {
        toast.error("Brak informacji o użytkowniku. Zaloguj się ponownie.");
        return;
      }
      const profile: BusinessProfile = {
        id: initialData?.id || "", // Will be generated by DB if empty
        name: values.name,         // Required field from form
        taxId: values.taxId,       // Required field from form
        address: values.address,   // Required field from form
        postalCode: values.postalCode, // Required field from form
        city: values.city,         // Required field from form
        regon: values.regon,       // Optional field
        bankAccount: values.bankAccount, // Optional field
        email: values.email || "", // Optional field
        phone: values.phone || "", // Optional field
        isDefault: values.isDefault,
        logo: initialData?.logo || "", // Preserve existing logo if any
        user_id: user.id, // Enforce RLS: always include user_id
        tax_type: values.tax_type,
      };

      await saveBusinessProfile(profile);
      toast.success(
        isEditing ? "Profil zaktualizowany" : "Profil utworzony"
      );
      
      if (onSuccess) {
        onSuccess();
      } else {
        navigate("/settings");
      }
    } catch (error) {
      console.error("Error saving business profile:", error);
      toast.error("Wystąpił błąd podczas zapisywania profilu");
    }
  };

  return (
    <Form {...form}>
      <form
        onSubmit={form.handleSubmit(onSubmit)}
        className="space-y-6 pb-10 max-w-full mx-auto"
      >
        <div className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            
          <FormField
              control={form.control}
              name="taxId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>NIP</FormLabel>
                  <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
                    <FormControl>
                      <Input placeholder="NIP" maxLength={10} {...field} />
                    </FormControl>
                    <Button
                      type="button"
                      size="sm"
                      variant="secondary"
                      style={{ minWidth: 60, padding: '0 10px' }}
                      onClick={async () => {
                        const nip = form.getValues("taxId");
                        if (!nip || nip.length !== 10) {
                          toast.error("Podaj poprawny NIP (10 cyfr)");
                          return;
                        }
                        try {
                          const today = new Date().toISOString().slice(0, 10);
                          const res = await fetch(`https://wl-api.mf.gov.pl/api/search/nip/${nip}?date=${today}`);

                          if (!res.ok) {
                            const errorData = await res.json();
                            const errorMessage = errorData.error ? errorData.error.message : `Błąd HTTP: ${res.status} ${res.statusText}`;
                            toast.error(`Błąd pobierania danych: ${errorMessage}`);
                            return;
                          }

                          const data = await res.json();

                          if (data.result && data.result.subject) {
                            const subject = data.result.subject;
                            form.setValue("name", subject.name || "");
                            form.setValue("address", subject.workingAddress || subject.residenceAddress || "");
                            // Try to extract postal code and city from address
                            if (subject.workingAddress || subject.residenceAddress) {
                              const addr = subject.workingAddress || subject.residenceAddress;
                              const match = addr.match(/(\d{2}-\d{3})\s+(.+)/);
                              if (match) {
                                form.setValue("postalCode", match[1]);
                                form.setValue("city", match[2]);
                              }
                            }
                            toast.success("Dane firmy pobrane z GUS");
                          } else {
                            toast.error("Nie znaleziono firmy dla podanego NIP");
                          }
                        } catch (err: any) {
                          toast.error(`Błąd podczas pobierania danych z API: ${err.message || err}`);
                        }
                      }}
                    >
                      Szukaj
                    </Button>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />

            <br></br>

            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Nazwa firmy</FormLabel>
                  <FormControl>
                    <Input placeholder="Nazwa firmy" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          <FormField
            control={form.control}
            name="address"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Adres</FormLabel>
                <FormControl>
                  <Input placeholder="Adres" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="postalCode"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Kod pocztowy</FormLabel>
                  <FormControl>
                    <Input placeholder="Kod pocztowy" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="city"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Miasto</FormLabel>
                  <FormControl>
                    <Input placeholder="Miasto" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          <FormField
            control={form.control}
            name="regon"
            render={({ field }) => (
              <FormItem>
                <FormLabel>REGON (opcjonalnie)</FormLabel>
                <FormControl>
                  <Input placeholder="REGON" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="bankAccount"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Numer konta bankowego (opcjonalnie)</FormLabel>
                <FormControl>
                  <Input placeholder="Numer konta bankowego" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email (opcjonalnie)</FormLabel>
                  <FormControl>
                    <Input placeholder="Email" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Telefon (opcjonalnie)</FormLabel>
                  <FormControl>
                    <Input placeholder="Telefon" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          <FormField
            control={form.control}
            name="tax_type"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Forma opodatkowania</FormLabel>
                <Select onValueChange={field.onChange} defaultValue={field.value}>
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Wybierz formę opodatkowania" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    <SelectItem value="skala">Skala podatkowa</SelectItem>
                    <SelectItem value="liniowy">Podatek liniowy (19%)</SelectItem>
                    <SelectItem value="ryczalt">Ryczałt ewidencjonowany</SelectItem>
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="isDefault"
            render={({ field }) => (
              <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
                <FormControl>
                  <Checkbox
                    checked={field.value}
                    onCheckedChange={field.onChange}
                  />
                </FormControl>
                <div className="space-y-1 leading-none">
                  <FormLabel>Ustaw jako domyślny profil firmy</FormLabel>
                </div>
              </FormItem>
            )}
          />
        </div>
        
        <div
      className="fixed bottom-0 left-0 w-full z-[100] bg-background border-t p-3 py-4 mb-[13px] flex justify-end space-x-2 pointer-events-auto sm:static sm:bg-transparent sm:border-0 sm:p-0 sm:pt-4 sm:mb-0"
      style={{ boxShadow: '0 -2px 8px rgba(0,0,0,0.04)', marginBottom: 0, paddingBottom: 12 }}
    >
          <Button
            type="button"
            variant="outline"
            onClick={() => navigate("/settings")}
            className={isMobile ? 'w-full' : ''}
          >
            Anuluj
          </Button>
          <Button type="submit" className={isMobile ? 'w-full' : ''}>
            {isEditing ? "Aktualizuj" : "Utwórz"} profil
          </Button>
        </div>
      </form>
    </Form>
  );
};

export default BusinessProfileForm;
