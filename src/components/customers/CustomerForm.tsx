import React from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Customer } from "@/types";
import { saveCustomer } from "@/integrations/supabase/repositories/customerRepository";
import { useAuth } from "@/context/AuthContext";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

const formSchema = z.object({
  name: z.string().min(1, "Nazwa jest wymagana"),
  taxId: z.string().min(10, "NIP jest wymagany i musi mieć 10 cyfr").max(10, "NIP musi mieć 10 cyfr"),
  address: z.string().min(1, "Adres jest wymagany"),
  postalCode: z.string().min(1, "Kod pocztowy jest wymagany"),
  city: z.string().min(1, "Miasto jest wymagane"),
  email: z.string().email("Niepoprawny format email").optional().or(z.literal("")),
  phone: z.string().optional(),
  customerType: z.enum(['odbiorca', 'sprzedawca', 'both'], { required_error: "Typ klienta jest wymagany" }),
});

interface CustomerFormProps {
  initialData?: Customer;
  isOpen: boolean;
  onClose: () => void;
  onSuccess: (customer: Customer) => void;
  defaultCustomerType?: 'odbiorca' | 'sprzedawca';
}

const CustomerForm = ({
  initialData,
  isOpen,
  onClose,
  onSuccess,
  defaultCustomerType,
}: CustomerFormProps) => {
  const { user } = useAuth();
  const isEditing = !!initialData?.id;

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: initialData?.name || "",
      taxId: initialData?.taxId || "",
      address: initialData?.address || "",
      postalCode: initialData?.postalCode || "",
      city: initialData?.city || "",
      email: initialData?.email || "",
      phone: initialData?.phone || "",
      customerType: initialData?.customerType || defaultCustomerType || 'odbiorca',
    },
  });

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    try {
      // Ensure all required fields are present by providing defaults if needed
      if (!user?.id) {
        toast.error("Brak informacji o użytkowniku. Zaloguj się ponownie.");
        return;
      }
      const customer: Customer = {
        id: initialData?.id || "",  // Will be generated by DB if empty
        name: values.name,          // Required field from form
        taxId: values.taxId || "",  // Optional field
        address: values.address,    // Required field from form
        postalCode: values.postalCode, // Required field from form
        city: values.city,          // Required field from form
        email: values.email || "",  // Optional field
        phone: values.phone || "",  // Optional field
        customerType: values.customerType,
        user_id: user.id, // Enforce RLS: always include user_id
      };

      const savedCustomer = await saveCustomer(customer);
      toast.success(
        isEditing ? "Klient zaktualizowany" : "Klient utworzony"
      );
      onSuccess(savedCustomer);
      onClose();
    } catch (error) {
      console.error("Error saving customer:", error);
      toast.error("Wystąpił błąd podczas zapisywania klienta");
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[525px] max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            {isEditing ? "Edytuj klienta" : "Dodaj nowego klienta"}
          </DialogTitle>
        </DialogHeader>
        <Form {...form}>
          <form
            onSubmit={form.handleSubmit(onSubmit)}
            className="space-y-4 pt-2"
          >

<FormField
              control={form.control}
              name="taxId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>NIP</FormLabel>
                  <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
                    <FormControl>
                      <Input placeholder="NIP" maxLength={10} {...field} />
                    </FormControl>
                    <Button
                      type="button"
                      size="sm"
                      variant="secondary"
                      style={{ minWidth: 60, padding: '0 10px' }}
                      onClick={async () => {
                        const nip = form.getValues("taxId");
                        if (!nip || nip.length !== 10) {
                          toast.error("Podaj poprawny NIP (10 cyfr)");
                          return;
                        }
                        try {
                          const today = new Date().toISOString().slice(0, 10);
                          const res = await fetch(`https://wl-api.mf.gov.pl/api/search/nip/${nip}?date=${today}`);

                          if (!res.ok) {
                            const errorData = await res.json();
                            const errorMessage = errorData.error ? errorData.error.message : `Błąd HTTP: ${res.status} ${res.statusText}`;
                            toast.error(`Błąd pobierania danych: ${errorMessage}`);
                            return;
                          }

                          const data = await res.json();

                          if (data.result && data.result.subject) {
                            const subject = data.result.subject;
                            form.setValue("name", subject.name || "");
                            form.setValue("address", subject.workingAddress || subject.residenceAddress || "");
                            // Try to extract postal code and city from address
                            if (subject.workingAddress || subject.residenceAddress) {
                              const addr = subject.workingAddress || subject.residenceAddress;
                              const match = addr.match(/(\d{2}-\d{3})\s+(.+)/);
                              if (match) {
                                form.setValue("postalCode", match[1]);
                                form.setValue("city", match[2]);
                              }
                            }
                            toast.success("Dane firmy pobrane z GUS");
                          } else {
                            toast.error("Nie znaleziono firmy dla podanego NIP");
                          }
                        } catch (err: any) {
                          toast.error(`Błąd podczas pobierania danych z API: ${err.message || err}`);
                        }
                      }}
                    >
                      Szukaj
                    </Button>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Nazwa</FormLabel>
                  <FormControl>
                    <Input placeholder="Nazwa firmy lub imię i nazwisko" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="address"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Adres</FormLabel>
                  <FormControl>
                    <Input placeholder="Adres" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="postalCode"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Kod pocztowy</FormLabel>
                    <FormControl>
                      <Input placeholder="Kod pocztowy" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="city"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Miasto</FormLabel>
                    <FormControl>
                      <Input placeholder="Miasto" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email (opcjonalnie)</FormLabel>
                  <FormControl>
                    <Input placeholder="Email" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Telefon (opcjonalnie)</FormLabel>
                  <FormControl>
                    <Input placeholder="Telefon" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="customerType"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Typ klienta</FormLabel>
                  <Select value={field.value} onValueChange={field.onChange}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Wybierz typ klienta" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="odbiorca">Odbiorca</SelectItem>
                      <SelectItem value="sprzedawca">Sprzedawca</SelectItem>
                      <SelectItem value="both">Oba</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="flex justify-end gap-2 pt-4">
              <Button type="button" variant="outline" onClick={onClose}>
                Anuluj
              </Button>
              <Button type="submit">
                {isEditing ? "Aktualizuj" : "Dodaj klienta"}
              </Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
};

export default CustomerForm;
